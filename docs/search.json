[
  {
    "objectID": "Daily.27.28.html",
    "href": "Daily.27.28.html",
    "title": "csu-ess-daily27.28",
    "section": "",
    "text": "library(osmdata)  \n\nData (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\n\nlibrary(sf)       \n\nLinking to GEOS 3.13.0, GDAL 3.8.5, PROJ 9.5.1; sf_use_s2() is TRUE\n\nlibrary(AOI) \nlibrary(terra)\n\nterra 1.8.42\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:terra':\n\n    intersect, union\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\n# Step 1: Get bounding box for Fort Collins\nfc_bbox &lt;- AOI::geocode(\"Fort Collins\", bbox = TRUE) |&gt; \n  st_transform(4326)\n\n\n# Step 2: Download OSM data for waterways\nfc_waterways &lt;- opq(bbox = st_bbox(fc_bbox)) |&gt;\n  add_osm_feature(key = \"waterway\") |&gt;\n  osmdata_sf()\n\nosm_lines &lt;- fc_waterways$osm_lines\n\n\n# Step 3: Filter for the Poudre River lines\npoudre_lines &lt;- osm_lines %&gt;%\n  filter(grepl(\"Poudre\", name, ignore.case = TRUE))\n\n# Step 4: Combine the lines to form the river\npoudre_river &lt;- st_union(poudre_lines)\npoudre_river &lt;- st_as_sf(poudre_river)\n\n\n# Step 5: Calculate river length\nriver_length &lt;- st_length(poudre_river)\nprint(river_length)\n\n243211.7 [m]\n\n\n\n# Step 6: Convert river geometry to points\npoudre_pts &lt;- st_cast(poudre_river, \"POINT\")\n\n\n# Step 7: Read elevation data and crop to Fort Collins bbox\nurl &lt;- \"https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/main/resources/foco-elev-cm.tif\"\nvsi_url &lt;- paste0(\"/vsicurl/\", url)\n\n# Read the raster data\nelev &lt;- rast(vsi_url)\n\n# Optional: Crop the raster to the Fort Collins bounding box\nbb &lt;- AOI::geocode(\"Fort Collins\", bbox = TRUE) |&gt; st_transform(5070)\nelev &lt;- crop(elev, bb)\n\n\n# Step 8: Extract elevation values for each point\nelev_vals &lt;- extract(elev, vect(poudre_pts))\n\nWarning: [extract] transforming vector data to the CRS of the raster\n\n# Bind extracted elevation values to the points\npoudre_pts &lt;- bind_cols(poudre_pts, elev_vals)\n\n# Add a column for point IDs\npoudre_pts &lt;- poudre_pts %&gt;% mutate(ID = 1:n())\n\n\n# Step 9: Calculate sinuosity\nstraight_dist &lt;- st_distance(poudre_pts[1, ], poudre_pts[nrow(poudre_pts), ])\nsinuosity &lt;- as.numeric(river_length / straight_dist)\nprint(paste(\"Sinuosity:\", round(sinuosity, 3)))\n\n[1] \"Sinuosity: 18.18\"\n\n\n\npoudre_pts &lt;- poudre_pts %&gt;% filter(!is.na(dem))\n\npoudre_pts &lt;- st_transform(poudre_pts, crs = 5070)  \nelev_diff_cm &lt;- poudre_pts$dem[1] - poudre_pts$dem[nrow(poudre_pts)]\n\nelev_diff_m &lt;- elev_diff_cm / 100\n\nriver_length_m &lt;- as.numeric(st_length(poudre_river)) / 1000 \nslope &lt;- elev_diff_m / river_length_m\n\nprint(paste(\"Slope:\", round(slope, 5), \"m/m\"))\n\n[1] \"Slope: -0.39809 m/m\"\n\n\n\ncolnames(poudre_pts) &lt;- c(\"ID\", \"dem\", \"geometry\")\n\npoudre_pts_df &lt;- as.data.frame(poudre_pts)\n\nhead(poudre_pts_df)\n\n  ID    dem                  geometry\n1  1 150035 POINT (-758310.8 1987730)\n2  2 150017 POINT (-758330.8 1987757)\n3  3 150050 POINT (-758302.2 1987882)\n4  4 150050   POINT (-758253 1988019)\n5  5 150058 POINT (-758236.7 1988052)\n6  6 150050 POINT (-758188.1 1988082)\n\n\n\n# Step 12: Create a line plot for elevation\nggplot(poudre_pts_df) +\n  geom_line(aes(x = ID, y = dem), color = \"blue\") +\n  labs(x = \"Point ID\", y = \"Elevation (cm)\", title = \"River Elevation Profile\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nst_geometry(poudre_pts) &lt;- \"geometry\"\n\nggplot() +\n  geom_sf(data = poudre_pts, aes(color = dem), size = 1.5) +\n  scale_color_viridis_c() +  # A nice color scale for elevation\n  labs(title = \"River Profile Colored by Elevation\", color = \"Elevation (cm)\") +\n  theme_minimal()"
  }
]